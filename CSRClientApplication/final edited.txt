CREATE DATABASE [windowsnot11]

GO
ALTER DATABASE [windowsnot11] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [windowsnot11] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [windowsnot11] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [windowsnot11] SET ARITHABORT OFF 
GO
ALTER DATABASE [windowsnot11] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [windowsnot11] SET AUTO_CREATE_STATISTICS ON 
GO
ALTER DATABASE [windowsnot11] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [windowsnot11] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [windowsnot11] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [windowsnot11] SET CURSOR_DEFAULT GLOBAL 
GO
ALTER DATABASE [windowsnot11] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [windowsnot11] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [windowsnot11] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [windowsnot11] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [windowsnot11] SET ENABLE_BROKER 
GO
ALTER DATABASE [windowsnot11] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [windowsnot11] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [windowsnot11] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [windowsnot11] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [windowsnot11] SET READ_WRITE 
GO
ALTER DATABASE [windowsnot11] SET RECOVERY FULL 
GO
ALTER DATABASE [windowsnot11] SET MULTI_USER 
GO
ALTER DATABASE [windowsnot11] SET PAGE_VERIFY CHECKSUM 
GO


USE [windowsnot11] ;

GO

CREATE QUEUE ChangeMessages ;

CREATE SERVICE ChangeNotifications

ON QUEUE ChangeMessages

([http://schemas.microsoft.com/SQL/Notifications/PostQueryNotification]) ;

CREATE ROUTE

ChangeRoute

WITH SERVICE_NAME = 'ChangeNotifications',

ADDRESS = 'LOCAL' ;

GO


USE [windowsnot11]
GO
/****** Object: Table [dbo].[NotificationTable] Script Date: 03/24/2007 20:37:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Event](
[EventID] [int] Identity,
[EventName] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[EventDate] [DateTime] NOT NULL,
[EventMessage] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[EventURL] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PopupDuration] [int] NOT NULL,
CONSTRAINT [PK_SQLNotificationRequestTable] PRIMARY KEY CLUSTERED 
(
[EventID] ASC
)WITH (PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go

CREATE TABLE [dbo].[Conversations](
[Identity] [int] IDENTITY(1,1) NOT NULL,
[ConversationHandle] [uniqueidentifier] NOT NULL,
[NotificationHandle] [uniqueidentifier] NOT NULL,
[UserName] [VARCHAR](50) NOT NULL
) ON [PRIMARY]
go

CREATE TABLE [dbo].[Users](
[UID] [int] Identity,
[UserName] [varchar](50) NOT NULL,
[EventID] [int],
CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED 
(
[UID] ASC
)WITH (PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
go

CREATE TABLE [dbo].[Viewed](
[ViewedID] [int] IDENTITY(1,1) NOT NULL,
[UID] [int] FOREIGN KEY REFERENCES Users(UID),
[EventID] [int] FOREIGN KEY REFERENCES Event(EventID),
CONSTRAINT [PK_Viewed] PRIMARY KEY CLUSTERED 
(
[ViewedID] ASC
)WITH (PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
go

CREATE TRIGGER [dbo].[Triggers]
ON [dbo].[Event]
AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
SET NOCOUNT ON;

--Strategy: look at the Inserted and Deleted tables available in the trigger to determine which rows were inserted, updated, or deleted
--Once we know that, build a string that contains information we want client app to know about. I go as far as to store all the data of the inserted/deleted tables
--into the string by looping through each row of the temporary table I make

DECLARE @Message xml
set @Message = N''

declare @tempTable Table
(
rowNumber int IDENTITY(0,1) NOT NULL,
EventID int,
EventName nvarchar(50),
EventDate datetime,
EventMessage nvarchar(50),
EventURL nvarchar(50),
PopupDuration int
)

declare @iterator int
set @iterator = 0
declare @count int
declare @string nvarchar(1024)
set @string = ' '
declare @number int
-- If a delete occurred
if Exists(Select EventID from Deleted) and not Exists(Select EventID from Inserted)
Begin 
insert into @tempTable (EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration) select EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration from Deleted 
set @count = (select count(EventName) from @tempTable)
while @iterator < @count
Begin
if @count > 1
begin 
if(@iterator != @count-1)
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ', 
'
end
else
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ' were deleted.' 
end
end
else
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ' was deleted.' 
end 
set @iterator = @iterator + 1
end 

set @Message = @string 
End
-- If an Insert occurred
if Exists(Select EventID from Inserted) and not Exists(Select EventID from Deleted)
Begin 
insert into @tempTable (EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration) select EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration from Inserted
set @count = (select count(EventName) from @tempTable)
while @iterator < @count
Begin
if @count > 1
begin 
if(@iterator != @count-1)
begin
set @string = @string + '{'
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + '} 
'
set @string = @string + '{'
set @string = @string + Cast((select EventDate from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventMessage from @tempTable where rowNumber = @iterator) as nvarchar) + '} 
'
set @string = @string + '{'
set @string = @string + Cast((select EventURL from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select PopupDuration from @tempTable where rowNumber = @iterator) as nvarchar) + '} 
'
end
else
begin
set @number = Cast((select EventID from @tempTable where rowNumber = @iterator) as int)
set @string = @string + '{'
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventDate from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventMessage from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventURL from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select PopupDuration from @tempTable where rowNumber = @iterator) as nvarchar) + '}'

end
end
else
begin
set @number = Cast((select EventID from @tempTable where rowNumber = @iterator) as int)
set @string = @string + '{'
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventDate from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventMessage from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select EventURL from @tempTable where rowNumber = @iterator) as nvarchar) + '}'
set @string = @string + '{'
set @string = @string + Cast((select PopupDuration from @tempTable where rowNumber = @iterator) as nvarchar) + '}' 
end 
set @iterator = @iterator + 1
end 

set @Message = @string 
end
if Exists(Select EventID from Deleted) and Exists(Select EventID from Inserted)
--Update Occurred
begin 
insert into @tempTable (EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration) select EventName, EventID , EventDate ,EventMessage,EventURL,PopupDuration from Inserted 
set @count = (select count(EventName) from @tempTable)
while @iterator < @count
Begin
if @count > 1
begin 
if(@iterator != @count-1)
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ', 
'
end
else
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ' were Updated.' 
end
end
else
begin
set @string = @string + Cast((select EventID from @tempTable where rowNumber = @iterator) as nvarchar) + ', '
set @string = @string + Cast((select EventName from @tempTable where rowNumber = @iterator) as nvarchar) + ' was Updated.' 
end 
set @iterator = @iterator + 1
end 

set @Message = @string 
end

--By using the PostQueryNotification Contract and QueryNotification Message Type, These messages will be caught by the SQLNotificationRequest

declare @conversations int
set @conversations = (select count(*) from Conversations);

set @iterator = 1;

declare @key int

declare @conversationsTable table
(
[Identity] [int] Identity not null,
[Key] [int]
)

insert into @conversationsTable([Key]) select [Identity] from Conversations

declare @ParticularEventUsers table
(
[Identity] [int] Identity not null,
[UserName] [varchar](50)
)

insert into @ParticularEventUsers([UserName]) select [UserName] from Users where EventID = @number
declare @res int

while @iterator <= @conversations
begin 
DECLARE @NotificationDialog uniqueidentifier
DECLARE @UserNameConv varchar(50)
set @NotificationDialog = (select [ConversationHandle] from [Conversations] where [Identity] = (select [Key] from @conversationsTable where [Identity] = @iterator)); 
set @UserNameConv = Cast((select [UserName] from [Conversations] where [Identity] = (select [Key] from @conversationsTable where [Identity] = @iterator)) as nvarchar); 

set @res = Cast((select count (*) from @ParticularEventUsers where UserName = @UserNameConv) as int)

if @res>0 
	begin
		SEND ON CONVERSATION @NotificationDialog 
		MESSAGE TYPE [http://schemas.microsoft.com/SQL/Notifications/QueryNotification] (@Message); 
end
set @iterator = @iterator + 1;
end

END